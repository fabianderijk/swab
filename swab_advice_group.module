<?php

// Define debug vars
define('SWAB_ADVICE_GROUP_DEBUG', FALSE);

// define field names
define('SWAB_ADVICE_GROUP_AGE_FIELD', 'field_advc_age_ref');
define('SWAB_ADVICE_GROUP_WEIGHT_FIELD', 'field_advc_weight_ref');
define('SWAB_ADVICE_GROUP_INDICATION_FIELD', 'field_advc_indications');

/**
 * Implements hook_menu().
 */
function swab_advice_group_menu() {
  $items = array();
  $items['swab_advice_group/ind'] = array(
    'title' => t('Indications'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('swab_advice_group_page'),
    'access callback' => TRUE,
    'file' => 'swab_advice_group_pages.inc',
  );
  return $items;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function swab_advice_group_form_advice_group_node_form_alter(&$form, &$form_state, $form_id) {
  // Load the include file with helper functions
  form_load_include($form_state, 'inc', 'swab_advice_group', 'swab_advice_group_forms');

  // Load the css file
  drupal_add_css(drupal_get_path('module', 'swab_advice_group') . '/css/swab_advice_group.css');

  swab_advice_group_include_references();
  drupal_add_js(drupal_get_path('module', 'swab_advice_group') . '/js/swab_advice_group.js');

  $tree = array();

  // Set some default values when editing a advice group node
  if (isset($form_state['node']->nid)) {
    $advices = swab_advice_group_get_advices_from_group($form_state['node']);

    foreach ($advices AS $advice) {
      $tree[$advice['nid']] = swab_advice_group_get_advices_from_advice($advice);
    }

    $form_state['advice_group_tree'] = $tree;

    if (empty($form_state['swab_advice_group_form_index'])) {
      $index = 0;
    }
    else {
      $index = max($form_state['swab_advice_group_form_index']) + 1;
    }

    if (!array_key_exists('advice_group_index_mappings', $form_state)) {
      $form_state['advice_group_index_mappings'] = array();
    }

    foreach ($tree as $advice => $advice_info) {
      if (!in_array($advice, $form_state['advice_group_index_mappings'])) {
        $form_state['advice_group_index_mappings'][$index] = $advice;
        $form_state['swab_advice_group_form_index'][] = $index;
        $form_state['advice_group_subforms_prepopulated'][] = $index;
        $index++;
      }
    }
  }

  $form['#submit'][] = 'swab_advice_group_form_submit_handler';

  $form['adv_fieldset'] = array(
      '#type' => 'fieldset',
      '#prefix' => '<div id="adv_group_forms">',
      '#suffix' => '</div>',
      '#title' => check_plain($form['field_advcg_advc']['und']['#title']),
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
      '#weight' => $form['field_advcg_advc']['#weight'],
      '#description' => check_plain($form['field_advcg_advc']['und']['#description']),
      '#tree' => TRUE,
  );
  // This variable will hold the current number of subforms
  if (empty($form_state['swab_advice_group_form_index'])) {
    $form_state['swab_advice_group_form_index'] = array(0);
  }
  if (empty($form_state['advice_group_index_mappings'])) {
    $form_state['advice_group_index_mappings'] = array();
  }
  foreach ($form_state['swab_advice_group_form_index'] AS $index) {
    $form['adv_fieldset']['adv_group_form'][$index] = swab_advice_group_create_form($index, $tree, $form_state['advice_group_index_mappings'], $form_state);
  }
  if (!SWAB_ADVICE_GROUP_DEBUG) {
    $form['field_advcg_advc']['#access'] = FALSE;
  }

  // The add more button
  $form['adv_fieldset']['add_more_subform'] = array(
    '#type' => 'submit',
    '#value' => 'Add another',
    '#submit' => array('swab_advice_group_add_another'),
    '#limit_validation_errors' => array(),
    '#ajax' => array(
      'callback' => 'swab_advice_group_ajax_callback',
      'wrapper' => 'adv_group_forms',
    ),
  );
}

function swab_advice_group_create_form($index, $tree, $mapping, $form_state) {
  $form = array();

  $form['advice_group_' . $index] = array(
    '#type' => 'fieldset',
    '#attributes' => array(
      'class' => array('advice_group_fieldset')
    )
  );

  $form['advice_group_' . $index]['advice_group_table_' . $index] = array(
      '#type' => 'container',
      '#attributes' => array(
        'class' => array('advices_table')
      )
  );

  // header row
  $form['advice_group_' . $index]['advice_group_table_' . $index]['advice_group_table_header_' . $index] = array(
      '#type' => 'container',
      '#attributes' => array(
          'class' => array('advice_group_table_header', 'advice_group_table_row')
      ),
  );

  $form['advice_group_' . $index]['advice_group_table_' . $index]['advice_group_table_header_' . $index]['adv_pa_' . $index] = array(
      '#type' => 'item',
      '#markup' => t('Patient Age'),
  );
  $form['advice_group_' . $index]['advice_group_table_' . $index]['advice_group_table_header_' . $index]['adv_w_' . $index] = array(
      '#type' => 'item',
      '#markup' => t('Patient Weight'),
  );
  $form['advice_group_' . $index]['advice_group_table_' . $index]['advice_group_table_header_' . $index]['adv_ind_' . $index] = array(
      '#type' => 'item',
      '#markup' => t('Indications'),
  );
  $form['advice_group_' . $index]['advice_group_table_' . $index]['advice_group_table_header_' . $index]['adv_rem_' . $index] = array(
      '#type' => 'item',
      '#markup' => t('Remarks'),
  );
  $form['advice_group_' . $index]['advice_group_table_' . $index]['advice_group_table_header_' . $index]['adv_dos_' . $index] = array(
      '#type' => 'item',
      '#markup' => t('Dosage Schema'),
  );
  $form['advice_group_' . $index]['advice_group_table_' . $index]['advice_group_table_header_' . $index]['adv_sc_' . $index] = array(
      '#type' => 'item',
      '#markup' => t('Score'),
      '#attributes' => array(
        'class' => array('adv_sc_item'),
      ),
  );
  // $form['advice_group_' . $index]['advice_group_table_' . $index]['advice_group_table_header_' . $index]['adv_row_weight_' . $index] = array(
      // '#type' => 'item',
      // '#markup' => t('Sort order'),
  // );

  $age = swab_advice_group_field_get_items(SWAB_ADVICE_GROUP_AGE_FIELD, 'advice');
  $weight = swab_advice_group_field_get_items(SWAB_ADVICE_GROUP_WEIGHT_FIELD, 'advice');

  $form['advice_group_' . $index]['advice_group_' . $index]['advice_group_' . $index . '_row'] = advice_group_create_subform_table_row($index, $tree, $mapping, $form_state, $age, $weight);

  $form['advice_group_' . $index]['advice_group_delete_' . $index] = array(
      '#type' => 'submit',
      '#value' => t('Delete'),
      '#name' => 'advice_group_delete_' . $index,
      '#submit' => array('swab_advice_group_remove_subform'),
      '#limit_validation_errors' => array(),
      '#ajax' => array(
          'callback' => 'swab_advice_group_ajax_callback',
          'wrapper' => 'adv_group_forms',
      ),
      '#attributes' => array(
          'class' => array('advice_group_delete_button'),
          'subform_index' => $index,
      )
  );

  return $form;
}

function advice_group_create_subform_table_row($i, $tree, $mapping, $form_state, $age, $weight) {
  $row = array(
    '#type' => 'container',
    '#attributes' => array(
      'class' => array('advice_group_table_row'),
    ),
  );

  $default_age = '_none';
  $default_weight = '_none';
  $default_indications = '';
  $default_indications_tid = '';
  $default_row_weight = 0;
  $nid = 0;

  if (!empty($tree)) {
    if (!empty($tree[$mapping[$i]])) {
      if (!empty($tree[$mapping[$i]]['age'])) {
        $default_age = $tree[$mapping[$i]]['age'];
      }
      if (!empty($tree[$mapping[$i]]['weight'])) {
        $default_weight = $tree[$mapping[$i]]['weight'];
      }
      if (!empty($tree[$mapping[$i]]['row_weight'])) {
        $default_row_weight = $tree[$mapping[$i]]['row_weight'];
      }
      if (!empty($tree[$mapping[$i]]['ind'])) {
        $default_indications = $tree[$mapping[$i]]['ind'];
      }
      if (!empty($tree[$mapping[$i]]['ind_tid'])) {
        $default_indications_tid = $tree[$mapping[$i]]['ind_tid'];
      }
      $nid = $mapping[$i];
    }
  }

  $row['adv_nid_table_' . $i . '_row'] = array(
    '#type' => 'hidden',
    '#value' => $nid,
  );
  $row['adv_age_table_' . $i . '_row'] = array(
    '#type' => 'select',
    '#description' => check_plain($age['description']),
    '#options' => $age['values'],
    '#required' => $age['required'],
  );
  $row['adv_weight_table_' . $i . '_row'] = array(
    '#type' => 'select',
    '#description' => check_plain($weight['description']),
    '#options' => $weight['values'],
    '#required' => $weight['required'],
  );
  $row['adv_ind_table_' . $i . '_row'] = array(
    '#type' => 'hidden',
    '#value' => $default_indications_tid,
    '#prefix' => '<div class="indication-placeholder indication-placeholder-' . $i . '"><span class="inner">' . $default_indications .'</span> - ' . l(t('Edit indications'), 'swab_advice_group/ind/' . $i, array('query' => array('tids' => $default_indications_tid), 'attributes' => array('class' => 'advice-dialog'))) . '</div>',
    '#attributes' => array(
      'class' => array('indication-field-' . $i),
    ),
  );
  $row['adv_rem_table_' . $i . '_row'] = array(
    '#type' => 'hidden',
    '#prefix' => '<div class="remarks-placeholder remarks-placeholder-' . $i . '"><span class="inner">Remarks placeholder</span></div>',
  );
  $row['adv_dos_table_' . $i . '_row'] = array(
    '#type' => 'hidden',
    '#prefix' => '<div class="dosage-placeholder dosage-placeholder-' . $i . '"><span class="inner">Dosage placeholder</span></div>',
  );
  $row['adv_score_table_' . $i . '_row'] = array(
    '#type' => 'item',
    '#markup' => '<div class="score-placeholder score-placeholder-' . $i . '">Score placeholder</div>',
    '#attributes' => array('class' => array('adv_sc_item')),
  );
  // $row['adv_row_weight_table_' . $i] = array(
    // '#prefix' => '<div>',
    // '#type' => 'weight',
    // '#title' => t('Weight'),
    // '#default_value' => 0,
    // '#delta' => 20,
    // '#suffix' => '</div>',
  // );

  if (array_key_exists($i, $mapping)) {
    $row['adv_age_table_' . $i . '_row']['#default_value'] = $default_age;
    $row['adv_weight_table_' . $i . '_row']['#default_value'] = $default_weight;
    // $row['adv_row_weight_table_' . $i]['#default_value'] = $default_row_weight;
  }

  return $row;
}

function swab_advice_group_form_submit_handler($form, &$form_state) {
  $advices = array();
  $node = $form_state['node'];
  $results = swab_advice_group_reformat_results($form_state['values']['adv_fieldset']['adv_group_form']);

  foreach ($results as $result) {
    if (empty($result['nid'])) {
      // create new node
      $n = new stdClass();
      $n->nid = NULL;
      $n->type = 'advice';
      node_object_prepare($n);
      $n->language = LANGUAGE_NONE;
      $n->title = 'Advice: ' . format_date($n->created, 'custom', 'd-m-Y H:i:s');
      $n = swab_advice_group_update_field($n, SWAB_ADVICE_GROUP_AGE_FIELD, LANGUAGE_NONE, 'nid', $result['age']);
      $n = swab_advice_group_update_field($n, SWAB_ADVICE_GROUP_WEIGHT_FIELD, LANGUAGE_NONE, 'nid', $result['weight']);
      if (!empty($result['indication'][0]['tid'])) {
        $n = swab_advice_group_update_field($n, SWAB_ADVICE_GROUP_INDICATION_FIELD, LANGUAGE_NONE, 'tid', $result['indication']);
      }
    }
    else {
      // update node
      $n = node_load($result['nid']);
      $n = swab_advice_group_update_field($n, SWAB_ADVICE_GROUP_AGE_FIELD, $n->language, 'nid', $result['age']);
      $n = swab_advice_group_update_field($n, SWAB_ADVICE_GROUP_WEIGHT_FIELD, $n->language, 'nid', $result['weight']);
      if (!empty($result['indication'][0]['tid'])) {
        $n = swab_advice_group_update_field($n, SWAB_ADVICE_GROUP_INDICATION_FIELD, $n->language, 'tid', $result['indication']);
      }
    }

    node_save($n);
    $advices[] = $n->nid;
  }

  $form_state['values']['field_advcg_advc'] = array('und' => array('add_more' => t('Add another item')));
  foreach ($advices AS $key => $advice) {
    $form_state['values']['field_advcg_advc']['und'][] = array(
      'nid' => $advice,
      '_weight' => $key,
    );
  }
}

function swab_advice_group_ajax_callback($form, $form_state) {
  return $form['adv_fieldset'];
}

function swab_advice_group_add_another($form, &$form_state) {
  $form_state['swab_advice_group_form_index'][] = max($form_state['swab_advice_group_form_index']) + 1;
  $form_state['rebuild'] = TRUE;
}

function swab_advice_group_remove_subform($form, &$form_state) {
  $del_value = $form_state['clicked_button']['#attributes']['subform_index'];
  unset($form_state['swab_advice_group_form_index'][$del_value]);

  if (in_array($del_value, $form_state['advice_group_subforms_prepopulated'])) {
    unset($form_state['advice_group_index_mappings'][$del_value]);
    $key = array_search($del_value, $form_state['advice_group_subforms_prepopulated']);
    if ($key !== FALSE) {
      unset($form_state['advice_group_subforms_prepopulated'][$key]);
    }
  }

  $form_state['rebuild'] = TRUE;
}
